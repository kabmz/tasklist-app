{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\tasklist-app\\\\src\\\\Task.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Task({\n  task,\n  deleteTask\n}) {\n  _s();\n  const [showSubtaskForm, setShowSubtaskForm] = useState(false);\n  const [subtaskText, setSubtaskText] = useState('');\n  const [subtasks, setSubtasks] = useState(task.subtasks);\n  const handleSubtaskDone = subtaskId => {\n    setSubtasks(subtasks.map(subtask => subtask.id === subtaskId ? {\n      ...subtask,\n      done: true\n    } : subtask));\n  };\n  const handleAddSubtask = () => {\n    if (subtaskText.trim() !== '') {\n      setSubtasks([...subtasks, {\n        id: subtasks.length + 1,\n        text: subtaskText,\n        done: false\n      }]);\n      setSubtaskText('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: task.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), subtasks.map(subtask => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `subtask ${subtask.done ? 'done' : ''}`,\n      children: [subtask.text, !subtask.done && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSubtaskDone(subtask.id),\n        className: \"btn btn-success btn-sm\",\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this)]\n    }, subtask.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => deleteTask(task.id),\n      className: \"btn btn-danger btn-sm\",\n      children: \"X\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowSubtaskForm(!showSubtaskForm),\n      className: \"btn btn-primary btn-sm\",\n      children: \"Add Sub-task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), showSubtaskForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter sub-task\",\n        value: subtaskText,\n        onChange: e => setSubtaskText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddSubtask,\n        className: \"btn btn-success btn-sm\",\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n_s(Task, \"oWP6wbLGl/WPSC3xoIPaSe1QMns=\");\n_c = Task;\nexport default Task;\nvar _c;\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Task","task","deleteTask","_s","showSubtaskForm","setShowSubtaskForm","subtaskText","setSubtaskText","subtasks","setSubtasks","handleSubtaskDone","subtaskId","map","subtask","id","done","handleAddSubtask","trim","length","text","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/tasklist-app/src/Task.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction Task({ task, deleteTask }) {\r\n  const [showSubtaskForm, setShowSubtaskForm] = useState(false);\r\n  const [subtaskText, setSubtaskText] = useState('');\r\n  const [subtasks, setSubtasks] = useState(task.subtasks);\r\n\r\n  const handleSubtaskDone = (subtaskId) => {\r\n    setSubtasks(subtasks.map((subtask) => (subtask.id === subtaskId ? { ...subtask, done: true } : subtask)));\r\n  };\r\n\r\n  const handleAddSubtask = () => {\r\n    if (subtaskText.trim() !== '') {\r\n      setSubtasks([...subtasks, { id: subtasks.length + 1, text: subtaskText, done: false }]);\r\n      setSubtaskText('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"task\">\r\n      <div>{task.text}</div>\r\n      {subtasks.map((subtask) => (\r\n        <div key={subtask.id} className={`subtask ${subtask.done ? 'done' : ''}`}>\r\n          {subtask.text}\r\n          {!subtask.done && (\r\n            <button onClick={() => handleSubtaskDone(subtask.id)} className=\"btn btn-success btn-sm\">\r\n              Done\r\n            </button>\r\n          )}\r\n        </div>\r\n      ))}\r\n      <button onClick={() => deleteTask(task.id)} className=\"btn btn-danger btn-sm\">\r\n        X\r\n      </button>\r\n      <button onClick={() => setShowSubtaskForm(!showSubtaskForm)} className=\"btn btn-primary btn-sm\">\r\n        Add Sub-task\r\n      </button>\r\n      {showSubtaskForm && (\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter sub-task\"\r\n            value={subtaskText}\r\n            onChange={(e) => setSubtaskText(e.target.value)}\r\n          />\r\n          <button onClick={handleAddSubtask} className=\"btn btn-success btn-sm\">\r\n            Add\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Task;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}